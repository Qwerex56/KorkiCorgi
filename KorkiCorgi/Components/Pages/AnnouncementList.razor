
@page "/AnnouncementList"

@using System.Text
@using KorkiCorgi.DataTransferObjects
@using KorkiCorgi.Models
@using KorkiCorgi.Services
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage

@rendermode InteractiveServer

@inject IAccountService AccountService
@inject NavigationManager NavigationManager
@inject ProtectedLocalStorage ProtectedLocalStorage
@* AnnouncementList *@

<PageTitle>Corgi/ListaOgloszen</PageTitle>
<link rel="preconnect" href="https://fonts.googleapis.com">
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
<link href="https://fonts.googleapis.com/css2?family=Itim&family=Josefin+Sans:ital,wght@0,100..700;1,100..700&family=Nova+Mono&display=swap" rel="stylesheet">

<selection class="main-container">
    <div class="main-filters">

        <h1 class="main-title">FILTRY</h1>
        <div class="main-filters-filter">
            <label for="subject-search" class="visually-hidden">Nazwa przedmiotu</label>
            <input type="search" id="subject-search" class="main-search" placeholder="Nazwa przedmiotu" value="@SearchFilters.Title"
                   @onchange="@(async e => 
                        { SearchFilters.Title = e.Value?.ToString(); await OnApply();})"/>
        </div>
        <div class="main-filters-filter">
            <label for="subject-search" class="visually-hidden">Miasto</label>
            <input type="search" id="subject-search" class="main-search" placeholder="Miasto" value="@SearchFilters.City"
                   @onchange="@(async e => 
                        { SearchFilters.City = e.Value?.ToString(); await OnApply();})"/>
        </div>
        <div class="main-filters-filter">
            <label for="subject-search" class="visually-hidden">Przedmiot</label>
            <input type="search" id="subject-search" class="main-search" placeholder="Przedmiot"/>
        </div>
        <div class="main-filters-filter">
            <label for="subject-search" class="visually-hidden">Zakres materia≈Çu</label>
            <input type="search" id="subject-search" class="main-search" placeholder="Zakres materia≈Çu"/>
        </div>
        <div class="main-filters-filter">
            <label for="subject-search" class="visually-hidden">Rodzaj lekcji</label>
            <input type="search" id="subject-search" class="main-search" placeholder="Rodzaj lekcji" value="@SearchFilters.IsOnline"
                   @onchange="@(async e => { SearchFilters.IsOnline = e.Value?.ToString() == "Tak"; await OnApply();})"/>
            @* mocny placeholder *@
        </div>

        <div class="main-filters-filter-cost">
            <div class="cost-label">cena</div>
            <div class="cost-inputs">
                <input type="number" class="cost-input" placeholder="od" min="0" value="@SearchFilters.CostMin"
                       @onchange="@(async e => { if (e.Value!.ToString() == string.Empty) { SearchFilters.CostMin = null; await OnApply(); return; } 
                            SearchFilters.CostMin = int.Parse(e.Value?.ToString()); await OnApply(); })">
                <input type="number" class="cost-input" placeholder="do" min="0" value="@SearchFilters.CostMax"
                       @onchange="@(async e => { if (e.Value!.ToString() == string.Empty) { SearchFilters.CostMax = null; await OnApply(); return;}
                            SearchFilters.CostMax = int.Parse(e.Value?.ToString()); await OnApply();})">
            </div>
        </div>


    </div>
    <div class="main-content">

        <div class="main-content-announcements">
            <div class="main-content-text">
                <h1 class="main-title">OG≈ÅOSZENIA</h1>
                <h1 class="main-subtitle">MATEMATYKA</h1>
            </div>
            @* pƒôtla wywo≈ÇujƒÖca div'y *@

            @if (_advertsQuery is null ) {
                <div>
                    <p>
                        Brak Wyszuka≈Ñ
                    </p>
                </div>
            }
            else {
                foreach (var item in _advertsQuery!) {
                    {
                        var user = AccountService.GetUserById(item.UserId);

                        <div class="main-content-announcements-announcement">
                            <div class="announcement-user">
                                <img src="images/user-image.png" class="announcement-user-image"/>
                                <h1 class="announcement-user-name">@(user.Name + " " + user.Surname)</h1>
                            </div>
                            <div class="announcement-content">
                                <div class="announcement-content-up">
                                    <h1 class="announcement-title">@item.Title</h1>
                                    <h1 class="announcement-description">@item.Descrition</h1>
                                </div>
                                <div class="announcement-content-down">
                                    <div class="announcement-content-down-info">
                                        <h1 class="announcement-online">Lekcja online: <span class="color-peach-orange">@(item.IsOnline? "Tak" : "Nie")</span></h1>
                                        <h1 class="announcement-place">miejsce: <span class="color-peach-orange">@item.MeetingPlace</span></h1>
                                    </div>
                                    <div class="announcement-content-down-rate">
                                        <div class="announcement-prize">
                                            <span class="announcement-prize-number">@item.Cost</span>
                                            <span class="announcement-prize-currency">z≈Ç</span>
                                        </div>
                                        <h1 class="announcement-time">za 60 minut</h1>
                                    </div>
                                    <button @onclick="() => OnSelected(item, user)" class="announcement-content-down-button">Um√≥w teraz</button>
                                </div>
                            </div>
                            <div class="announcement-statistics">
                                <div class="image-container">
                                    <img src="images/heart.png" class="announcement-user-heart-img"/>
                                    <h1 class="announcement-user-hearts">@user.AccountStatistics?.OwnerRating</h1>
                                </div>
                                <div class="image-container">
                                    <img src="images/material.png" class="announcement-user-material-img"/>
                                    <h1 class="announcement-user-materials">@user.AccountStatistics?.TotalMaterialsCount</h1>
                                </div>
                            </div>
                        </div>
                    }
                }
            }

        </div>
    </div>
</selection>

<selection class="second-container">
    <img src="images/second-top-line.png" class="second-top-line"/>
    <div class="second-content">
        <h1 class="second-title">CHCESZ SIƒò CZEGO≈ö NAUCZYƒÜ?</h1>
        <h2 class="second-subtitle">ODWIED≈π NASZƒÑ DARMOWƒÑ <button class="button">BAZƒò ZADA≈É </button> I <button class="button"> MATERIA≈Å√ìW DYDAKTYCZNYCH </button></h2>
    </div>
    <img src="images/second-bottom-line.png" class="second-bottom-line"/>
</selection>

<div class="third-background"></div>
<selection class="third-container">
    <div class="third-content">
        <h1 class="third-title">DAJESZ KORKI?</h1>
        <h2 class="third-subtitle">
            <button class="button">DO≈ÅƒÑCZ DO NAS</button>
        </h2>
    </div>
    <div class="help-content">
        <h3 class="help-title">POMOC</h3>
        <h3 class="help-info">123 123 123</h3>
        <h3 class="help-info">Corgi@gmail.com</h3>
    </div>
    <h3 class="copyright">¬©Corgi</h3>
</selection>

@code {
    //OnInitialized sprawia, ≈ºe mamy czas oczekiwania OnAfterRender renderuje najpierw stronƒô, p√≥≈∫niej dodaje dane
    //Przy okazji Leon to ü§°, Frontend nie jest wgl zdebugowany xD
    private IEnumerable<Advert>? _advertsQuery;
    private SearchFilterDto SearchFilters { get; set; } = new();
    private string? _queryString;
    private bool isInitialized = false;

    private ProfilPanelDto ProfilDto { get; set; } = new();

    //TODO - Napisaƒá to lepiej i wybraƒá jednƒÖ wersjƒô
    protected override async Task OnAfterRenderAsync(bool firstRender) {
        if (firstRender) {
            var context = new HttpClient();
            var requestUri = new StringBuilder("http://localhost:5121/api/v1/Advert/GetAdvertsByFilters")
                .Append(_queryString)
                .ToString();
            _advertsQuery = await context.GetFromJsonAsync<IEnumerable<Advert>?>(requestUri);
            StateHasChanged();
            isInitialized = true;
        }
    }

    // protected override async Task OnInitializedAsync() {
    //     var context = new HttpClient();
    //     var requestUri = new StringBuilder("http://localhost:5121/api/v1/Advert/GetAdvertsByFilters")
    //         .Append(_queryString)
    //         .ToString();
    //     _advertsQuery = await context.GetFromJsonAsync<IEnumerable<Advert>?>(requestUri);
    // }

    private async Task OnApply() {
         _queryString = SearchFilters.BuildQueryString();
         await OnAfterRenderAsync(true);
         // await OnInitializedAsync();
    }

    private void OnSelected(Advert advert, User user) {
        ProfilDto.Name = user.Name;
        ProfilDto.Surname = user.Surname;
        //TODO - Poprawna inicjalizacja AccountStatistics
        ProfilDto.Description = advert.Descrition;
        ProfilDto.Cost = advert.Cost;
        ProfilDto.IsOnline = advert.IsOnline;
        ProfilDto.MeetingPlace = advert.MeetingPlace;
        ProtectedLocalStorage.SetAsync(advert.Id.ToString(), ProfilDto);
        NavigationManager.NavigateTo($"http://localhost:5121/ProfilPanel/{advert.Id.ToString()}");
    }
}